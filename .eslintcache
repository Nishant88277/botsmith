[{"/home/netrat/Desktop/dev/botsmith/src/index.js":"1","/home/netrat/Desktop/dev/botsmith/src/App.js":"2","/home/netrat/Desktop/dev/botsmith/src/Components/Dashboard/index.js":"3","/home/netrat/Desktop/dev/botsmith/src/Components/Dashboard/style.js":"4","/home/netrat/Desktop/dev/botsmith/src/Components/Sidebar/index.js":"5","/home/netrat/Desktop/dev/botsmith/src/Components/Header/index.js":"6","/home/netrat/Desktop/dev/botsmith/src/Components/Designer/index.js":"7","/home/netrat/Desktop/dev/botsmith/src/Components/Template-listing/index.js":"8","/home/netrat/Desktop/dev/botsmith/src/Components/Bot-listing/index.js":"9","/home/netrat/Desktop/dev/botsmith/src/Components/BotSidebar/index.js":"10","/home/netrat/Desktop/dev/botsmith/src/Container/BotDesigner/index.js":"11","/home/netrat/Desktop/dev/botsmith/src/Components/Sidebar/style.js":"12","/home/netrat/Desktop/dev/botsmith/src/Components/Header/style.js":"13","/home/netrat/Desktop/dev/botsmith/src/Components/Template-listing/style.js":"14","/home/netrat/Desktop/dev/botsmith/src/Components/BotSidebar/style.js":"15","/home/netrat/Desktop/dev/botsmith/src/Container/BotDesigner/style.js":"16","/home/netrat/Desktop/dev/botsmith/src/Container/ModuleHeading/index.js":"17","/home/netrat/Desktop/dev/botsmith/src/Container/ModuleCard/index.js":"18","/home/netrat/Desktop/dev/botsmith/src/Components/BotRightSidebar/index.js":"19","/home/netrat/Desktop/dev/botsmith/src/Container/ModuleHeading/style.js":"20","/home/netrat/Desktop/dev/botsmith/src/Container/ModuleCard/style.js":"21","/home/netrat/Desktop/dev/botsmith/src/Components/BotRightSidebar/style.js":"22"},{"size":197,"mtime":1615699302480,"results":"23","hashOfConfig":"24"},{"size":459,"mtime":1615701902340,"results":"25","hashOfConfig":"24"},{"size":2082,"mtime":1615699302480,"results":"26","hashOfConfig":"24"},{"size":173,"mtime":1615699302480,"results":"27","hashOfConfig":"24"},{"size":3608,"mtime":1615699302480,"results":"28","hashOfConfig":"24"},{"size":7011,"mtime":1615699302480,"results":"29","hashOfConfig":"24"},{"size":1709,"mtime":1615699302480,"results":"30","hashOfConfig":"24"},{"size":8134,"mtime":1615699302480,"results":"31","hashOfConfig":"24"},{"size":7987,"mtime":1615699302480,"results":"32","hashOfConfig":"24"},{"size":13407,"mtime":1615699302480,"results":"33","hashOfConfig":"24"},{"size":3349,"mtime":1615712457851,"results":"34","hashOfConfig":"24"},{"size":1558,"mtime":1615699302480,"results":"35","hashOfConfig":"24"},{"size":2464,"mtime":1615699302480,"results":"36","hashOfConfig":"24"},{"size":1468,"mtime":1615699302480,"results":"37","hashOfConfig":"24"},{"size":1236,"mtime":1615699302480,"results":"38","hashOfConfig":"24"},{"size":943,"mtime":1615699302480,"results":"39","hashOfConfig":"24"},{"size":432,"mtime":1615699302480,"results":"40","hashOfConfig":"24"},{"size":658,"mtime":1615699302480,"results":"41","hashOfConfig":"24"},{"size":13078,"mtime":1615706462866,"results":"42","hashOfConfig":"24"},{"size":190,"mtime":1615699302480,"results":"43","hashOfConfig":"24"},{"size":703,"mtime":1615699302480,"results":"44","hashOfConfig":"24"},{"size":1941,"mtime":1615699302480,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1wlt8so",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/home/netrat/Desktop/dev/botsmith/src/index.js",[],["93","94"],"/home/netrat/Desktop/dev/botsmith/src/App.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Dashboard/index.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Dashboard/style.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Sidebar/index.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Header/index.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Designer/index.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Template-listing/index.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Bot-listing/index.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/BotSidebar/index.js",["95"],"import React, {useState, useEffect} from \"react\";\n\n// --image--\nimport SearchIcon from \"../../Assets/images/search-icon.svg\";\nimport DatabaseIcon from \"../../Assets/images/database-icon.svg\";\nimport DropdownIcon from \"../../Assets/images/dropdown-icon.svg\";\nimport BackGreyIcon from \"../../Assets/images/backgrey-icon.svg\";\nimport CloseIcon from \"../../Assets/images/close-icon.svg\";\n\n// --style--\nimport BotSidebarStyle from \"./style\";\n\nconst DATABASE = \"database\";\nconst FEEDS = \"feeds\";\nconst CUSTOMGUI = \"customgui\";\nconst SCRIPT = \"script\";\nconst COMMUNICATE = \"communicate\";\nconst DESCISION = \"decision\";\n\nlet categoryArr = [\n    {\n        type: DATABASE,\n        name: \"Database\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"My-Sql\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"select\",\n                    },\n                    {\n                        name: \"save\",\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        type: FEEDS,\n        name: \"Feeds\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"RSS\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"Watch\",\n                    }\n                ],\n            },\n        ],\n    },\n    {\n        type: CUSTOMGUI,\n        name: \"Custom GUI\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"News Action Intel\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"Save News\"\n                    },\n                    {\n                        name: \"Fetch Assets\"\n                    },\n                    {\n                        name: \"Fetch Watchwords\"\n                    },\n                    {\n                        name: \"Save Matched News\"\n                    },\n                    {\n                        name: \"Publish News to Portal\"\n                    }\n                ],\n            },\n        ],\n    },\n    {\n        type: SCRIPT,\n        name: \"Script\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"Python\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"Execute\",\n                    }\n                ],\n            },\n        ],\n    },\n    {\n        type: COMMUNICATE,\n        name: \"Communicate\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"Email\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"Send\",\n                    }\n                ],\n            },\n        ],\n    },\n    {\n        type: DESCISION,\n        name: \"Decision\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"Match\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"Text\",\n                    }\n                ],\n            },\n        ],\n    },\n]\n\nfunction BotSidebar(props) {\n    const [Type, setType] = useState(\"\");\n    const [Search, setSearch] = useState(\"\");\n    const [Actions, setActions] = useState(false);\n    const [Categories, setCategories] = useState(categoryArr);\n\n    const handleBack = () => {\n        if (Type !== \"\") {\n            setType(\"\");\n            setActions(false);\n            setCategories(categoryArr)\n        }\n    };\n\n    const handleSearch = (e) => {\n        setSearch(e.target.value);\n    };\n\n    // Call after setSearch\n    useEffect(() => {\n        if (Search !== \"\") {\n            setCategories(\n                Categories.filter((category) => {\n                    return (category.subCategories.some((subcategory) => {\n                        return subcategory.name\n                            .toLocaleLowerCase()\n                            .trim()\n                            .includes(Search.toLocaleLowerCase().trim());\n                    })) || (category.name.toLocaleLowerCase().trim().includes(Search.toLocaleLowerCase().trim()));\n                })\n            );\n        } else {\n            setCategories(categoryArr);\n        }\n    }, [Search]);\n\n    const PassData = (Data) => {\n        props.Node(Data);\n        setActions(false);\n        setCategories(categoryArr);\n        setType(\"\");\n    }\n\n    useEffect(() => {\n        setType(\"\");\n        setActions(false);\n        setCategories(categoryArr)\n    }, [props.LeftSidebar])\n\n    return (\n        <div className=\"BotSidebar position-fixed\">\n            {(Type === \"\") && <div className=\"pl-3 pr-3\">\n                <h6 className=\"mb-3\">All Components</h6>\n                <input\n                    type=\"text\"\n                    className=\"SearchBar w-100 theme-text\"\n                    placeholder=\"Search\"\n                    style={{backgroundImage: `url(${SearchIcon})`}}\n                    onChange={handleSearch}\n                />\n                <hr className=\"mb-0\"/>\n                {(Search === '') && <h6 className=\"mb-3 mt-3\">Categories</h6>}\n            </div>}\n            {Categories.map(function (category, index) {\n                return (\n                    <div key={index}>\n                        <div className=\"pl-3 pr-3\">\n                            <div className=\"mb-0\" onClick={handleBack}>\n                                <div\n                                    className=\"d-flex cursor-pointer\"\n                                    onClick={() => {\n                                        Search === '' && setType(category.type);\n                                        Search === '' && setCategories(categoryArr.filter((Category) => {\n                                                return (category.type === Category.type)\n                                            }\n                                        ))\n                                    }}\n                                >\n                                    {/*{console.log(Type, Categories)}*/}\n                                    {(Type !== \"\") && <img src={BackGreyIcon} alt=\"BackGreyIcon\"/>}\n                                    {(Type === \"\") && (Search === '') && <img src={DatabaseIcon} alt=\"DatabaseIcon\"/>}\n                                    {(Search === '') ? <span\n                                        className=\"ml-3\"\n                                    >\n                                      {category.name}\n                                    </span> : <h6 className='mt-3'>{category.name}</h6>}\n                                    {(Type === \"\") && (Search === '') &&\n                                    <img className=\"ml-auto\" src={DropdownIcon} alt=\"DropdownIcon\"/>}\n                                    {/* add variables instead of hard coded values */}\n                                </div>\n                            </div>\n                            {(Type !== \"\") &&\n                            <input\n                                type=\"text\"\n                                className=\"SearchBar w-100 mt-3 theme-text\"\n                                placeholder=\"Search\"\n                                style={{backgroundImage: `url(${SearchIcon})`}}\n                            />\n                            }\n                            <ul\n                                className={\n                                    (Search === '') ? \"pl-0 mb-0 mt-4 position-relative\" : \"pl-0 mb-0\"\n                                }\n                            >\n                                {category.subCategories.map(function (subcategory, index) {\n                                    return ((category.type === Type) || (Search !== \"\")) && (\n                                        <div className='position-relative' key={index}>\n                                            <li\n                                                className=\"d-flex justify-content-between cursor-pointer\"\n                                                onClick={() => {\n                                                    setActions(true)\n                                                    //set the show actions property = true for the clicked subcategory and false for others\n                                                    Categories.forEach((Category) => {\n                                                        if (category.type === Category.type) {\n                                                            //  in the selected category , make the selected subcategory showAction true\n                                                            Category.subCategories.forEach((Subcategory) => {\n                                                                Subcategory.showActions = (subcategory.name === Subcategory.name)\n                                                            })\n                                                        } else {\n                                                            //in the other categories , set all the subcategory showActions to false\n                                                            Category.subCategories.forEach((Subcategory) => {\n                                                                Subcategory.showActions = false\n                                                            })\n                                                        }\n\n                                                    })\n                                                }}\n                                            >\n                                                <div className=\"d-flex\">\n                                                    <img src={DatabaseIcon} alt=\"DatabaseIcon\"/>\n                                                    <span className=\"theme-text ml-2\">\n                                                      {subcategory.name}\n                                                    </span>\n                                                </div>\n                                                <img src={DropdownIcon} alt=\"DropdownIcon\"/>\n                                            </li>\n\n\n                                            {Actions && subcategory.showActions && (\n                                                <div className=\"p-3 pt-4 ActionStyle\">\n                                                    <img\n                                                        src={CloseIcon}\n                                                        className=\"cursor-pointer\"\n                                                        alt=\"CloseIcon\"\n                                                        onClick={() => setActions(false)}\n                                                    />\n                                                    <h6>\n                                                        <span>ACTIONS</span>\n                                                    </h6>\n                                                    <input\n                                                        type=\"text\"\n                                                        className=\"SearchBar w-100 mb-3 theme-text pt-2 pb-2\"\n                                                        placeholder=\"Search\"\n                                                        style={{backgroundImage: `url(${SearchIcon})`}}\n                                                    />\n                                                    <ul className=\"pl-0 list-unstyled\">\n                                                        {subcategory.actions.map((action, index) => {\n                                                            return <li key={index} className='cursor-pointer' onClick={() => {\n                                                                //pass the selected category , subcategory and action data in props\n                                                                let passData = {\n                                                                    id: Math.floor(Math.random() * 40),\n                                                                    category: category.name,\n                                                                    component: subcategory.name,\n                                                                    action: action.name,\n                                                                    description: \"Add decription to the array first\"\n                                                                }\n                                                                PassData(passData);\n                                                            }\n                                                            }>{action.name}</li>;\n                                                        })}\n                                                    </ul>\n                                                </div>\n                                            )}\n                                        </div>\n                                    )\n                                })}\n                            </ul>\n                        </div>\n                    </div>\n                );\n            })}\n            <BotSidebarStyle/>\n        </div>\n    );\n}\n\nexport default BotSidebar;","/home/netrat/Desktop/dev/botsmith/src/Container/BotDesigner/index.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Sidebar/style.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Header/style.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/Template-listing/style.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/BotSidebar/style.js",[],"/home/netrat/Desktop/dev/botsmith/src/Container/BotDesigner/style.js",[],"/home/netrat/Desktop/dev/botsmith/src/Container/ModuleHeading/index.js",[],"/home/netrat/Desktop/dev/botsmith/src/Container/ModuleCard/index.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/BotRightSidebar/index.js",["96"],"import React, { useState } from \"react\";\nimport Select from \"react-select\";\n\n// style\nimport BotRightStyle from \"./style\";\n\n// Image\nimport Close from '../../Assets/images/close-icon.svg'\n\nfunction BotRightSidebar(props) {\n    const options = [{ value: \"localhost\", label: \"localhost\" }];\n    const [URL, setURL] = useState('')\n    const [error, setError] = useState('')\n    const [showOutputOptions, setOutputOptions] = useState(false)\n    const [event , setEvent] = useState(null)\n\n    function handleValidate(event) {\n        event.preventDefault();\n        fetch(`http://192.168.5.32:9006/api/v1/m-aa/rss/sample?url=${URL}`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if(result.entries){\n                        var existing = JSON.parse(localStorage.getItem('output'));\n                        existing = existing ? existing : [];\n                        existing.push(...result.entries);\n                        localStorage.setItem('output', JSON.stringify(existing));\n                        props.closeSidebar();\n                    }else{\n                        setError(result.detail);\n                    }\n                }\n            )\n    }\n\n  return (\n    <div className=\"BotRightSidebar position-fixed pt-5\">\n      <h5 className=\"theme-text header text-capitalize pt-4 pl-3 pr-3 pb-3\">{props.node}</h5>\n      {/*<SwitchComponents nodeName={props.node} options={options} />*/}\n        {\n            props.node === \"select\" &&\n            <form className=\"pl-3 pr-3\">\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Connection</label>\n                    <div className=\"row m-0\">\n                        <div className=\"col-9 pl-0\">\n                            <Select options={options} />\n                        </div>\n                        <div className=\"col-3 pl-0 pr-0 w-100\">\n                            <button className=\"btn btn-outline-primary w-100\">Add</button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Table</label>\n                    <Select options={options} />\n                </div>\n                <div className=\"mt-4\">\n                    <div className=\"d-flex justify-content-between\">\n                        <label className=\"theme-text font-weight-normal\">ID</label>\n                        <span className=\"charColor\">Varchar(40)</span>\n                    </div>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">\n                        Choose List of Text\n                    </label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <hr className=\"mt-4 mb-4\" />\n                <button className=\"btn sidebarButton text-white w-50 float-right\" >\n                    Validate\n                </button>\n            </form>\n        }\n        {\n            props.node === \"Watch\" &&\n            <form\n                onSubmit={(e) => handleValidate(e)}\n                className=\"pl-3 pr-3\"\n            >\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">URL</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                        onChange={(e) => { setURL(e.target.value) }}\n                        value={URL}\n                    />\n                    <p className='mb-0 mt-2 text-danger'>{error}</p>\n                </div>\n                <hr className=\"mt-4 mb-4\" />\n                <button className=\"btn sidebarButton text-white w-50 float-right\" onClick={(e) => handleValidate(e)} >\n                    Validate\n                </button>\n            </form>\n        }\n        {\n            props.node === \"Decision\" &&\n            <form className=\"pl-3 pr-3\">\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">\n                        Choose List of Text\n                    </label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <div className='mt-4'>\n                    <label className=\"theme-text font-weight-normal\">\n                        Choose Data\n                    </label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <hr className=\"mt-4 mb-4\" />\n                <button className=\"btn sidebarButton text-white w-50 float-right\" >\n                    Validate\n                </button>\n            </form>\n        }\n        {\n            props.node === \"Save News\" &&\n            <form className=\"pl-3 pr-3 position-relative\">\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Title</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                        onFocus = {(e)=> {\n                            setOutputOptions (true)\n                            setEvent(e)\n                        }}\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Description</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                        onFocus = {(e)=> {\n                            setOutputOptions (true)\n                            setEvent(e)\n                        }}\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Link</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                        onFocus = {(e)=> {\n                            setOutputOptions (true)\n                            setEvent(e)\n                        }}\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Published DateTime</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                        onFocus = {(e)=> {\n                            setOutputOptions (true)\n                            setEvent(e)\n                        }}\n                    />\n                </div>\n                <hr className=\"mt-4 mb-4\" />\n                <button className=\"btn sidebarButton text-white w-50 float-right\">\n                    Validate\n                </button>\n\n                { showOutputOptions && <OutputOptions event = {event} close={() => setOutputOptions(false)}/>}\n\n            </form>\n        }\n        {\n            props.node === \"Publish News to Portal\" &&\n            <form className=\"pl-3 pr-3\">\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Title</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Description</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Link</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Published DateTime</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <hr className=\"mt-4 mb-4\" />\n                <button className=\"btn sidebarButton text-white w-50 float-right\" >\n                    Validate\n                </button>\n            </form>\n        }\n        {\n            props.node === \"Save Matched News\" &&\n            <form className=\"pl-3 pr-3\">\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">Published DateTime</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">List of Matched Watchwords</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">List of Matched Assets</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <div className=\"mt-4\">\n                    <label className=\"theme-text font-weight-normal\">source</label>\n                    <input\n                        className=\"d-block w-100 sideInput theme-text pl-2\"\n                        type=\"text\"\n                    />\n                </div>\n                <hr className=\"mt-4 mb-4\" />\n                <button className=\"btn sidebarButton text-white w-50 float-right\" >\n                    Validate\n                </button>\n            </form>\n        }\n      <BotRightStyle />\n    </div>\n  );\n}\n\nexport default BotRightSidebar;\n\nconst AddInput = (e, key, props) => {\n    e.preventDefault();\n    props.event.target.value = key;\n}\n\nconst closeModal = (props) => {\n    props.close()\n}\n\n// modal to show the \"output\" for save news fields\nfunction OutputOptions(props) {\n\n    // const obj = JSON.parse(localStorage.getItem('output'))[0];\n    // const response = [];\n    // for (const key in obj) {\n    //     response.push(\n    //         {\n    //             key: obj[key]['displayName'],\n    //             value: obj[key]['value']\n    //         },\n    //     )\n    // }\n    const objs = JSON.parse(localStorage.getItem('output'));\n    const responses = [];\n    objs.map((item, index) => {\n        const subitems = [];\n        for (const key in item) {\n            subitems.push(\n                {\n                    key: item[key]['displayName'],\n                    value: item[key]['value']\n                },\n            )\n        }\n        responses.push({\n            position: index,\n            data: subitems\n        });\n        \n    })\n\n    return (\n        <div className=\"modal-dialog-centered OutputStyle d-block\">\n            <div className='modalHead'>\n                Select Data\n                <img className='cursor-pointer m-2' onClick={() => closeModal(props)} src={Close} alt='Close' />\n            </div>\n            {\n                responses.map((topItem, topIndex) => {\n                    return <div className='d-flex listStyle'>\n                    <ul className='list-unstyled p-0 m-0 w-100'>\n                        <p>\n                            {topIndex + 1}\n                        </p>\n                        {\n                            topItem.data.map((item, index) => {\n                                return <li className='d-flex align-items-center mb-2' key={index}>\n                                    <button onClick={(e) => AddInput(e, item.key, props)} className='mb-0 modalButton'>{item.key}</button>\n                                    <p className='mb-0 pl-2 col-8 text-truncate'>{item.value}</p>\n                                </li>\n                            })\n                        }\n                    </ul>\n                </div>\n                })\n            }\n            \n        </div>\n    )\n}","/home/netrat/Desktop/dev/botsmith/src/Container/ModuleHeading/style.js",[],"/home/netrat/Desktop/dev/botsmith/src/Container/ModuleCard/style.js",[],"/home/netrat/Desktop/dev/botsmith/src/Components/BotRightSidebar/style.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":168,"column":8,"nodeType":"103","endLine":168,"endColumn":16,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":293,"column":28,"nodeType":"107","messageId":"108","endLine":293,"endColumn":30},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Categories'. Either include it or remove the dependency array. You can also do a functional update 'setCategories(C => ...)' if you only need 'Categories' in the 'setCategories' call.","ArrayExpression",["111"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},"Update the dependencies array to be: [Categories, Search]",{"range":"114","text":"115"},[4367,4375],"[Categories, Search]"]