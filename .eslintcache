[{"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/index.js":"1","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/App.js":"2","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Dashboard/index.js":"3","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Dashboard/style.js":"4","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Template-listing/index.js":"5","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Sidebar/index.js":"6","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Bot-listing/index.js":"7","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Header/index.js":"8","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Designer/index.js":"9","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/BotSidebar/index.js":"10","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/BotDesigner/index.js":"11","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Template-listing/style.js":"12","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Sidebar/style.js":"13","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/BotSidebar/style.js":"14","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Header/style.js":"15","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/BotDesigner/style.js":"16","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/ModuleHeading/index.js":"17","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/ModuleCard/index.js":"18","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/BotRightSidebar/index.js":"19","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/ModuleCard/style.js":"20","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/ModuleHeading/style.js":"21","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/BotRightSidebar/style.js":"22"},{"size":197,"mtime":1613191856505,"results":"23","hashOfConfig":"24"},{"size":315,"mtime":1613191856501,"results":"25","hashOfConfig":"24"},{"size":1744,"mtime":1613191856505,"results":"26","hashOfConfig":"24"},{"size":173,"mtime":1613191856505,"results":"27","hashOfConfig":"24"},{"size":8134,"mtime":1613191856505,"results":"28","hashOfConfig":"24"},{"size":3608,"mtime":1613191856505,"results":"29","hashOfConfig":"24"},{"size":7987,"mtime":1613191856505,"results":"30","hashOfConfig":"24"},{"size":7011,"mtime":1613191856505,"results":"31","hashOfConfig":"24"},{"size":1709,"mtime":1613191856505,"results":"32","hashOfConfig":"24"},{"size":12709,"mtime":1613191856505,"results":"33","hashOfConfig":"24"},{"size":6202,"mtime":1613725905566,"results":"34","hashOfConfig":"24"},{"size":1468,"mtime":1613191856505,"results":"35","hashOfConfig":"24"},{"size":1558,"mtime":1613191856505,"results":"36","hashOfConfig":"24"},{"size":1236,"mtime":1613191856505,"results":"37","hashOfConfig":"24"},{"size":2464,"mtime":1613191856505,"results":"38","hashOfConfig":"24"},{"size":908,"mtime":1613191856505,"results":"39","hashOfConfig":"24"},{"size":432,"mtime":1613191856505,"results":"40","hashOfConfig":"24"},{"size":658,"mtime":1613191856505,"results":"41","hashOfConfig":"24"},{"size":6421,"mtime":1614061104151,"results":"42","hashOfConfig":"24"},{"size":703,"mtime":1613191856505,"results":"43","hashOfConfig":"24"},{"size":190,"mtime":1613191856505,"results":"44","hashOfConfig":"24"},{"size":995,"mtime":1613191856505,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"n2769k",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/index.js",[],["93","94"],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/App.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Dashboard/index.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Dashboard/style.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Template-listing/index.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Sidebar/index.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Bot-listing/index.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Header/index.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Designer/index.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/BotSidebar/index.js",["95"],"import React, {useState, useEffect} from \"react\";\n\n// --image--\nimport SearchIcon from \"../../Assets/images/search-icon.svg\";\nimport DatabaseIcon from \"../../Assets/images/database-icon.svg\";\nimport DropdownIcon from \"../../Assets/images/dropdown-icon.svg\";\nimport BackGreyIcon from \"../../Assets/images/backgrey-icon.svg\";\nimport CloseIcon from \"../../Assets/images/close-icon.svg\";\n\n// --style--\nimport BotSidebarStyle from \"./style\";\n\nconst DATABASE = \"database\";\nconst FEEDS = \"feeds\";\nconst CUSTOMGUI = \"customgui\";\nconst SCRIPT = \"script\";\nconst COMMUNICATE = \"communicate\";\nconst DESCISION = \"decision\";\n\nlet categoryArr = [\n    {\n        type: DATABASE,\n        name: \"Database\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"My-Sql\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"select\",\n                    },\n                    {\n                        name: \"save\",\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        type: FEEDS,\n        name: \"Feeds\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"RSS\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"Watch\",\n                    }\n                ],\n            },\n        ],\n    },\n    {\n        type: CUSTOMGUI,\n        name: \"Custom GUI\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"News Action Intel\",\n                showActions: false,\n                actions: [],\n            },\n        ],\n    },\n    {\n        type: SCRIPT,\n        name: \"Script\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"Python\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"Execute\",\n                    }\n                ],\n            },\n        ],\n    },\n    {\n        type: COMMUNICATE,\n        name: \"Communicate\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"Email\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"Send\",\n                    }\n                ],\n            },\n        ],\n    },\n    {\n        type: DESCISION,\n        name: \"Decision\",\n        icon: DatabaseIcon,\n        subCategories: [\n            {\n                name: \"Match\",\n                showActions: false,\n                actions: [\n                    {\n                        name: \"Text\",\n                    }\n                ],\n            },\n        ],\n    },\n]\n\nfunction BotSidebar(props) {\n    const [Type, setType] = useState(\"\");\n    const [Search, setSearch] = useState(\"\");\n    const [Actions, setActions] = useState(false);\n    const [Categories, setCategories] = useState(categoryArr);\n\n\n    const handleBack = () => {\n        if (Type !== \"\") {\n            setType(\"\");\n            setActions(false);\n            setCategories(categoryArr)\n        }\n    };\n\n    const handleSearch = (e) => {\n        setSearch(e.target.value);\n    };\n\n    // Call after setSearch\n    useEffect(() => {\n        if (Search !== \"\") {\n            setCategories(\n                Categories.filter((category) => {\n                    return (category.subCategories.some((subcategory) => {\n                        return subcategory.name\n                            .toLocaleLowerCase()\n                            .trim()\n                            .includes(Search.toLocaleLowerCase().trim());\n                    })) || (category.name.toLocaleLowerCase().trim().includes(Search.toLocaleLowerCase().trim()));\n                })\n            );\n        } else {\n            setCategories(categoryArr);\n        }\n    }, [Search]);\n\n    const PassData = (Data) => {\n        props.Node(Data)\n    }\n\n    return (\n        <div className=\"BotSidebar position-fixed\">\n            {(Type === \"\") && <div className=\"pl-3 pr-3\">\n                <h6 className=\"mb-3\">All Components</h6>\n                <input\n                    type=\"text\"\n                    className=\"SearchBar w-100 theme-text\"\n                    placeholder=\"Search\"\n                    style={{backgroundImage: `url(${SearchIcon})`}}\n                    onChange={handleSearch}\n                />\n                <hr className=\"mb-0\"/>\n                {(Search === '') && <h6 className=\"mb-3 mt-3\">Categories</h6>}\n            </div>}\n            {Categories.map(function (category, index) {\n                return (\n                    <div key={index}>\n                        <div className=\"pl-3 pr-3\">\n                            <div className=\"mb-0\" onClick={handleBack}>\n                                <div\n                                    className=\"d-flex cursor-pointer\"\n                                    onClick={() => {\n                                        Search === '' && setType(category.type);\n                                        Search === '' && setCategories(categoryArr.filter((Category) => {\n                                                return (category.type === Category.type)\n                                            }\n                                        ))\n                                    }}\n                                >\n                                    {/*{console.log(Type, Categories)}*/}\n                                    {(Type !== \"\") && <img src={BackGreyIcon} alt=\"BackGreyIcon\"/>}\n                                    {(Type === \"\") && (Search === '') && <img src={DatabaseIcon} alt=\"DatabaseIcon\"/>}\n                                    {(Search === '') ? <span\n                                        className=\"ml-3\"\n                                    >\n                                      {category.name}\n                                    </span> : <h6 className='mt-3'>{category.name}</h6>}\n                                    {(Type === \"\") && (Search === '') &&\n                                    <img className=\"ml-auto\" src={DropdownIcon} alt=\"DropdownIcon\"/>}\n                                    {/* add variables instead of hard coded values */}\n                                </div>\n                            </div>\n                            {(Type !== \"\") &&\n                            <input\n                                type=\"text\"\n                                className=\"SearchBar w-100 mt-3 theme-text\"\n                                placeholder=\"Search\"\n                                style={{backgroundImage: `url(${SearchIcon})`}}\n                            />\n                            }\n                            <ul\n                                className={\n                                    (Search === '') ? \"pl-0 mb-0 mt-4 position-relative\" : \"pl-0 mb-0\"\n                                }\n                            >\n                                {category.subCategories.map(function (subcategory, index) {\n                                    return ((category.type === Type) || (Search !== \"\")) && (\n                                        <div className='position-relative' key={index}>\n                                            <li\n                                                className=\"d-flex justify-content-between cursor-pointer\"\n                                                onClick={() => {\n                                                    setActions(true)\n                                                    //set the show actions property = true for the clicked subcategory and false for others\n                                                    Categories.forEach((Category) => {\n                                                        if (category.type === Category.type) {\n                                                            //  in the selected category , make the selected subcategory showAction true\n                                                            Category.subCategories.forEach((Subcategory) => {\n                                                                Subcategory.showActions = (subcategory.name === Subcategory.name)\n                                                            })\n                                                        } else {\n                                                            //in the other categories , set all the subcategory showActions to false\n                                                            Category.subCategories.forEach((Subcategory) => {\n                                                                Subcategory.showActions = false\n                                                            })\n                                                        }\n\n                                                    })\n\n                                                }}\n                                            >\n                                                <div className=\"d-flex\">\n                                                    <img src={DatabaseIcon} alt=\"DatabaseIcon\"/>\n                                                    <span className=\"theme-text ml-2\">\n                                                      {subcategory.name}\n                                                    </span>\n                                                </div>\n                                                <img src={DropdownIcon} alt=\"DropdownIcon\"/>\n                                            </li>\n\n\n                                            {Actions && subcategory.showActions && (\n                                                <div className=\"p-3 pt-4 ActionStyle\">\n                                                    <img\n                                                        src={CloseIcon}\n                                                        className=\"cursor-pointer\"\n                                                        alt=\"CloseIcon\"\n                                                        onClick={() => setActions(false)}\n                                                    />\n                                                    <h6>\n                                                        <span>ACTIONS</span>\n                                                    </h6>\n                                                    <input\n                                                        type=\"text\"\n                                                        className=\"SearchBar w-100 mb-3 theme-text pt-2 pb-2\"\n                                                        placeholder=\"Search\"\n                                                        style={{backgroundImage: `url(${SearchIcon})`}}\n                                                    />\n                                                    <ul className=\"pl-0 list-unstyled\">\n                                                        {subcategory.actions.map((action, index) => {\n                                                            return <li key={index} className='cursor-pointer' onClick={() => {\n                                                                //pass the selected category , subcategory and action data in props\n                                                                let passData = {\n                                                                    id: Math.floor(Math.random() * 40),\n                                                                    category: category.name,\n                                                                    component: subcategory.name,\n                                                                    action: action.name,\n                                                                    description: \"Add decription to the array first\"\n                                                                }\n                                                                PassData(passData);\n                                                            }\n                                                            }>{action.name}</li>;\n                                                        })}\n                                                    </ul>\n                                                </div>\n                                            )}\n\n                                        </div>\n                                    )\n                                })}\n                            </ul>\n                        </div>\n                    </div>\n                );\n            })}\n            <BotSidebarStyle/>\n        </div>\n    );\n}\n\nexport default BotSidebar;","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/BotDesigner/index.js",["96","97","98","99"],"import React, { useState, useEffect } from \"react\";\nimport ReactFlow, {\n  Controls,\n  updateEdge,\n  Background,\n  getConnectedEdges,\n  useZoomPanHelper,\n  useStore,\n  ReactFlowProvider,\n} from \"react-flow-renderer\";\n\n// components\nimport BotRightSidebar from \"../../Components/BotRightSidebar\";\n\n// Images\nimport CreatedBotIocn from \"../../Assets/images/Created-Bot-icon.svg\";\n\n// style\nimport BotEditStyle from \"./style\";\n\n\nlet initialElements = {\n  node: [\n    // {\n    //   id: \"1\",\n    //   data: {\n    //     label: (\n    //       <div className=\"d-flex text-left\">\n    //         <img\n    //           className=\"mr-3 componentIcon\"\n    //           src={CreatedBotIocn}\n    //           alt=\"CreatedBotIocn\"\n    //         />\n    //         <div>\n    //           <p className=\"theme-text mb-0 componentHead\">Component A</p>\n    //           <p className=\"componentSub mb-0\" style={{ color: \"#6A768E\" }}>\n    //             Other Text that helps the user to uinderstand this\n    //           </p>\n    //         </div>\n    //       </div>\n    //     ),\n    //   },\n    //   position: { x: 250, y: 0 },\n    // },\n    // {\n    //   id: \"2\",\n    //   data: {\n    //     label: (\n    //       <div className=\"d-flex text-left\">\n    //         <img\n    //           className=\"mr-3 componentIcon\"\n    //           src={CreatedBotIocn}\n    //           alt=\"CreatedBotIocn\"\n    //         />\n    //         <div>\n    //           <p className=\"theme-text mb-0 componentHead\">Component B</p>\n    //           <p className=\"componentSub mb-0\" style={{ color: \"#6A768E\" }}>\n    //             Other Text that helps the user to uinderstand this\n    //           </p>\n    //         </div>\n    //       </div>\n    //     ),\n    //   },\n    //   position: { x: 100, y: 200 },\n    // },\n    // {\n    //   id: \"3\",\n    //   data: {\n    //     label: (\n    //       <div className=\"d-flex text-left\">\n    //         <img\n    //           className=\"mr-3 componentIcon\"\n    //           src={CreatedBotIocn}\n    //           alt=\"CreatedBotIocn\"\n    //         />\n    //         <div>\n    //           <p className=\"theme-text mb-0 componentHead\">Component C</p>\n    //           <p className=\"componentSub mb-0\" style={{ color: \"#6A768E\" }}>\n    //             Other Text that helps the user to uinderstand this\n    //           </p>\n    //         </div>\n    //       </div>\n    //     ),\n    //   },\n    //   position: { x: 400, y: 200 },\n    // },\n  ],\n  edges: [\n    // {\n    //   id: \"e1-2\",\n    //   type: \"smoothstep\",\n    //   animated: true,\n    //   source: \"1\",\n    //   target: \"2\",\n    // },\n    // {\n    //   id: \"e1-3\",\n    //   type: \"smoothstep\",\n    //   animated: true,\n    //   source: \"1\",\n    //   target: \"3\",\n    // },\n  ],\n};\n\nconst onLoad = (reactFlowInstance) => reactFlowInstance.fitView();\n\nfunction EditBot(props) {\n  // const [elements, setElements] = useState(initialElements);\n\n  const [elements, setElements] = useState([\n    ...initialElements.node,\n    ...initialElements.edges,\n  ]);\n  const [hide, setHide] = useState(false);\n  const [node, setNode] = useState(false);\n\n  // const store = useStore();\n  // const { zoomIn, zoomOut, setCenter } = useZoomPanHelper();\n\n  // function focusNode () {\n  //   const { nodes } = store.getState();\n  //   if (nodes.length) {\n  //     const node = nodes[0];\n  //     const x = node.__rf.position.x + node.__rf.width / 2;\n  //     const y = node.__rf.position.y + node.__rf.height / 2;\n  //     const zoom = 1.85;\n  //     setCenter(x, y, zoom);\n  //   }\n  // };\n\n  useEffect(() => {\n    \n    let nodeId = initialElements.node.length + 1;\n    if (props.Node) {\n     \n     \n      let newNode = {\n        id: nodeId,\n        data: {\n          label: (\n            <div className=\"d-flex text-left\">\n              <img\n                className=\"mr-3 componentIcon pointer-none\"\n                src={CreatedBotIocn}\n                alt=\"CreatedBotIocn\"\n              />\n              <div>\n                <p className=\"theme-text mb-0 componentHead\">\n                  {props.Node.category}\n                </p>\n                <p className=\"componentSub mb-0\" style={{ color: \"#6A768E\" }}>\n                  {props.Node.description}\n                </p>\n              </div>\n            </div>\n          ),\n        },\n        position: {\n          x:\n            initialElements.node.length > 0\n              ? initialElements.node[initialElements.node.length - 1].position.x\n              : 0, \n          y:\n            initialElements.node.length > 0\n              ? initialElements.node[initialElements.node.length - 1].position\n                  .y + 200\n              : 0, \n        },\n      };\n\n      let newEdge = {\n        id: `e${nodeId - 1}-${nodeId}`,\n        type: \"smoothstep\",\n        animated: true,\n        source: `${nodeId - 1}`,\n        target: `${nodeId}`,\n      };\n\n\n      initialElements.node.push(newNode);\n      //only push edge when there is already a node present\n      (initialElements.node.length > 1) ? (initialElements.edges.push(newEdge)) : console.log(\"First element\")\n      console.log(initialElements);\n      \n      setElements([...initialElements.node, ...initialElements.edges]);\n      console.log(elements)\n  \n    }\n  }, [props.Node]);\n\n  // gets called after end of edge gets dragged to another source or target\n  const onEdgeUpdate = (oldEdge, newConnection) =>\n    setElements((els) => updateEdge(oldEdge, newConnection, els));\n\n  // const onConnect = (params) => setElements((els) => addEdge(params, els));\n\n  const onElementClick = (event, element) => {\n    setNode(\n      element &&\n        element.data &&\n        element.data.label.props.children[1].props.children[0].props.children\n    );\n    setHide(true);\n   \n  };\n\n  return (\n    <div className=\"EditBotSection\">\n    <ReactFlowProvider>\n      <ReactFlow\n        elements={elements}\n        onLoad={onLoad}\n        snapToGrid\n        onEdgeUpdate={onEdgeUpdate}\n        onElementClick={onElementClick}\n        \n      >\n        <Background variant=\"dots\" />\n        <Controls />\n      </ReactFlow>\n      </ReactFlowProvider>\n      {hide && <BotRightSidebar node={node} />}\n      <BotEditStyle />\n    </div>\n  );\n}\n\nexport default EditBot;\n","/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Template-listing/style.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Sidebar/style.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/BotSidebar/style.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/Header/style.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/BotDesigner/style.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/ModuleHeading/index.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/ModuleCard/index.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/BotRightSidebar/index.js",["100"],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/ModuleCard/style.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Container/ModuleHeading/style.js",[],"/home/netrat/Desktop/Afzal/code/job/BotSmith/botsmith/src/Components/BotRightSidebar/style.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":153,"column":8,"nodeType":"107","endLine":153,"endColumn":16,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":6,"column":3,"nodeType":"111","messageId":"112","endLine":6,"endColumn":20},{"ruleId":"109","severity":1,"message":"113","line":7,"column":3,"nodeType":"111","messageId":"112","endLine":7,"endColumn":19},{"ruleId":"109","severity":1,"message":"114","line":8,"column":3,"nodeType":"111","messageId":"112","endLine":8,"endColumn":11},{"ruleId":"105","severity":1,"message":"115","line":190,"column":6,"nodeType":"107","endLine":190,"endColumn":18,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":8,"column":3,"nodeType":"119","messageId":"120","endLine":181,"endColumn":4},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Categories'. Either include it or remove the dependency array. You can also do a functional update 'setCategories(C => ...)' if you only need 'Categories' in the 'setCategories' call.","ArrayExpression",["123"],"no-unused-vars","'getConnectedEdges' is defined but never used.","Identifier","unusedVar","'useZoomPanHelper' is defined but never used.","'useStore' is defined but never used.","React Hook useEffect has a missing dependency: 'elements'. Either include it or remove the dependency array.",["124"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [Categories, Search]",{"range":"129","text":"130"},"Update the dependencies array to be: [elements, props.Node]",{"range":"131","text":"132"},[3886,3894],"[Categories, Search]",[5224,5236],"[elements, props.Node]"]